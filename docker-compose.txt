version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    restart: always
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://scubaai:${DB_PASSWORD}@db:5432/scubaai
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=${GROQ_MODEL}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGIN=https://${DOMAIN}
    depends_on:
      - db
    volumes:
      - backend_data:/app/data
    networks:
      - app_network

  # Frontend web application  
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    restart: always
    depends_on:
      - backend
    networks:
      - app_network

  # Database service
  db:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_USER=scubaai
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=scubaai
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network

  # Web server and reverse proxy
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    depends_on:
      - backend
      - frontend
    networks:
      - app_network

  # SSL certificate manager
  certbot:
    image: certbot/certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app_network:
    driver: bridge

volumes:
  db_data:
  backend_data:
  certbot_data:
  certbot_www: